---
title: "SLR: Model fitting in R with tidymodels"
subtitle: "STA 210 - Spring 2022"
author: "Dr. Mine Ã‡etinkaya-Rundel"
footer:  "[sta210-s22.github.io/website](https://sta210-s22.github.io/website/)"
logo: "images/logo.png"
format: 
  revealjs: 
    theme: slides.scss
    multiplex: true
    transition: fade
    slide-number: true
editor: visual
execute:
  freeze: auto
---

```{r setup}
#| include: false
library(countdown)
knitr::opts_chunk$set(
  fig.width = 6,
  fig.asp = 0.618,
  fig.align = "center",
  out.width = "90%"
)
```

# Welcome

## Announcements

-   If you're just joining the class, welcome! Go to the [course website](https://sta210-s22.github.io/website) and review content you've missed, read the syllabus, and complete the *Getting to know you* survey.
-   Lab 1 is due Friday, at 5pm, on Gradescope.

## Recap of last lecture {.smaller}

::: incremental
-   Used simple linear regression to describe the relationship between a quantitative predictor and quantitative outcome variable.

-   Used the least squares method to estimate the slope and intercept.

-   We interpreted the slope and intercept.

    ::: incremental
    -   **Slope:** For every one unit increase in $x$, we expect y to be higher/lower by $\hat{\beta}_1$ units, on average.
    -   **Intercept:** If $x$ is 0, then we expect $y$ to be $\hat{\beta}_0$ units.
    :::

-   Predicted the response given a value of the predictor variable.

-   Defined extrapolation and why we should avoid it.
:::

## Interested in the math behind it all?

See the supplemental notes on [Deriving the Least-Squares Estimates for Simple Linear Regression](/supplemental/slr-derivations.html) for more mathematical details on the derivations of the estimates of $\beta_0$ and $\beta_1$.

## Outline

-   Use tidymodels to fit and summarize regression models in R
-   Complete an application exercise on exploratory data analysis and modeling

## Computational setup

```{r packages}
#| echo: true
#| message: false

# load packages
library(tidyverse)       # for data wrangling
library(tidymodels)      # for modeling
library(fivethirtyeight) # for the fandango dataset

# set default theme and larger font size for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 16))

# set default figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 8,
  fig.asp = 0.618,
  fig.retina = 3,
  dpi = 300,
  out.width = "80%"
)
```

# Data

## Movie ratings

::: columns
::: {.column width="70%"}
-   Data behind the FiveThirtyEight story [*Be Suspicious Of Online Movie Ratings, Especially Fandango's*](%22Be%20Suspicious%20Of%20Online%20Movie%20Ratings,%20Especially%20Fandango's%22)
-   In the **fivethirtyeight** package: [`fandango`](https://fivethirtyeight-r.netlify.app/reference/fandango.html)
-   Contains every film that has at least 30 fan reviews on Fandango, an IMDb score, Rotten Tomatoes critic and user ratings, and Metacritic critic and user scores
:::

::: {.column width="30%"}
![](images/lec-2/fandango.png){fig-alt="Fandango logo" width="200"}

![](images/lec-2/imdb.png){fig-alt="IMDB logo" width="200"}

![](images/lec-2/rotten-tomatoes.png){fig-alt="Rotten Tomatoes logo" width="200"}

![](images/lec-2/metacritic.png){fig-alt="Metacritic logo" width="200"}
:::
:::

## Data prep

-   Rename Rotten Tomatoes columns as `critics` and `audience`
-   Rename the dataset as `movie_scores`

```{r data-prep}
#| echo: true
movie_scores <- fandango %>%
  rename(
    critics = rottentomatoes, 
    audience = rottentomatoes_user
  )
```

## Data visualization

```{r}
ggplot(movie_scores, 
       aes(x = critics, y = audience)) +
  geom_point(alpha = 0.5) + 
  labs(
    x = "Critics Score" , 
    y = "Audience Score"
    )
```

# Using R for SLR

## Step 1: Specify model

```{r}
#| echo: true
linear_reg()
```

## Step 2: **Set model fitting *engine***

```{r}
#| echo: true
# #| code-line-numbers: "|2"

linear_reg() %>%
  set_engine("lm") # lm: linear model
```

## Step 3: Fit model & estimate parameters

using **formula syntax**

```{r}
#| echo: true
# #| code-line-numbers: "|3"

linear_reg() %>%
  set_engine("lm") %>%
  fit(audience ~ critics, data = movie_scores)
```

## A closer look at model output

```{r}
#| echo: true
movie_fit <- linear_reg() %>%
  set_engine("lm") %>%
  fit(audience ~ critics, data = movie_scores)

movie_fit
```

$$\widehat{\text{audience}} = 32.3155 + 0.5187 \times \text{critics}$$

. . .

**Note:** The intercept is off by a tiny bit from the hand-calculated intercept, this is likely just rounding error in the hand calculation.

## The regression output

We'll focus on the first column for now...

```{r}
#| echo: true
# #| code-line-numbers: "|4"

linear_reg() %>%
  set_engine("lm") %>%
  fit(audience ~ critics, data = movie_scores) %>%
  tidy()
```

## Prediction

```{r}
#| echo: true
# #| code-line-numbers: "|2|5"

# create a data frame for a new movie
new_movie <- tibble(critics = 50)

# predict the outcome for a new movie
predict(movie_fit, new_movie)
```

# Application exercise

::: appex
ðŸ“‹ [github.com/sta210-s22/ae-1-dcbikeshare](https://github.com/sta210-s22/ae-1-dcbikeshare)
:::

followed by a demo of exporting your work and uploading to GradeScope

# Recap

-   Used tidymodels to fit and summarize regression models in R
-   Completed an application exercise on exploratory data analysis and modeling
